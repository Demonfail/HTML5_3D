<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

test_smoothed_timer = 100;
test_frame_start_time = get_timer();

mousex_delta = 0;
mousey_delta = 0;
mouse_lock = false;

x = -1400;
y = 0;
z = 50;

look_x = 0;
look_y = 0;
look_z = 0;

look_xy_angle = 0;
look_pz_angle = 0;//p = plane

test_light_x = 0;
test_light_y = 0;
test_light_z = 0;
test_sound_playing = false;
test_sound_distance = 0;
test_sound_mix = 0;
test_sound_volume = 0;



vertex_format_begin();
vertex_format_add_position_3d();
vertex_format_add_textcoord();
vertex_format_add_colour();
vertex_format_add_normal();
vft_simple = vertex_format_end();

vbf_test = vertex_create_buffer();
var _vbuff = vbf_test;
vertex_begin( _vbuff, vft_simple );

for( var _x = 0; _x &lt; 320; _x += 64 ) {
    for( var _y = 0; _y &lt; 320; _y += 64 ) {
        
        var _p_l = _x;
        var _p_t = _y;
        var _p_r = _x + 64;
        var _p_b = _y + 64;
        
        vertex_position_3d( _vbuff, _p_l, _p_t, 0 ); vertex_texcoord( _vbuff, 0, 0 ); vertex_colour( _vbuff, c_white, 1 ); vertex_normal( _vbuff, 0, 0, 1 );
        vertex_position_3d( _vbuff, _p_r, _p_t, 0 ); vertex_texcoord( _vbuff, 1, 0 ); vertex_colour( _vbuff, c_white, 1 ); vertex_normal( _vbuff, 0, 0, 1 );
        vertex_position_3d( _vbuff, _p_l, _p_b, 0 ); vertex_texcoord( _vbuff, 0, 1 ); vertex_colour( _vbuff, c_white, 1 ); vertex_normal( _vbuff, 0, 0, 1 );
        
        vertex_position_3d( _vbuff, _p_r, _p_t, 0 ); vertex_texcoord( _vbuff, 1, 0 ); vertex_colour( _vbuff, c_white, 1 ); vertex_normal( _vbuff, 0, 0, 1 );
        vertex_position_3d( _vbuff, _p_r, _p_b, 0 ); vertex_texcoord( _vbuff, 1, 1 ); vertex_colour( _vbuff, c_white, 1 ); vertex_normal( _vbuff, 0, 0, 1 );
        vertex_position_3d( _vbuff, _p_l, _p_b, 0 ); vertex_texcoord( _vbuff, 0, 1 ); vertex_colour( _vbuff, c_white, 1 ); vertex_normal( _vbuff, 0, 0, 1 );
        
    }
}

vertex_end( vbf_test );

global.dither_sprite = dither_make_sprite();
global.dither_texture = sprite_get_texture( global.dither_sprite, 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Step

clear_mouse_movement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( keyboard_check( vk_escape ) ) game_end();

var _click = mouse_check_button_pressed( mb_left );
var _space = keyboard_check_pressed( vk_space );

if ( os_browser != browser_not_a_browser ) {
    if ( _click ) request_mouse_lock();
    if ( _space ) exit_mouse_lock();
    mousex_delta = get_mouse_x_movement();
    mousey_delta = get_mouse_y_movement();
    if ( os_browser == browser_firefox ) {
        mousex_delta *= 8;
        mousey_delta *= 8;
    }
} else {
    if ( _click ) mouse_lock = true;
    if ( _space ) mouse_lock = false;
    if ( mouse_lock ) {
        mousex_delta = window_mouse_get_x() - window_get_width()*0.5;
        mousey_delta = window_mouse_get_y() - window_get_height()*0.5;
        window_mouse_set( window_get_width()*0.5, window_get_height()*0.5 );
    }
}

if ( keyboard_check( ord( "Q" ) ) ) z += 10;
if ( keyboard_check( ord( "E" ) ) ) z -= 10;

var _vpara = 0;
var _vperp = 0;
if ( keyboard_check( ord( "A" ) ) ) _vperp = -2;
if ( keyboard_check( ord( "D" ) ) ) _vperp =  2;
if ( keyboard_check( ord( "W" ) ) ) _vpara =  2;
if ( keyboard_check( ord( "S" ) ) ) _vpara = -2;

if ( _vpara != 0 ) {
    x += lengthdir_x( _vpara, look_xy_angle );
    y += lengthdir_y( _vpara, look_xy_angle );
}

if ( _vperp != 0 ) {
    x += lengthdir_x( _vperp, look_xy_angle-90 );
    y += lengthdir_y( _vperp, look_xy_angle-90 );
}

look_xy_angle -= mousex_delta/10;
look_pz_angle = clamp( look_pz_angle - mousey_delta/5, -90, 90 );

var _xy_cos = dcos( look_xy_angle );
var _xy_sin = dsin( look_xy_angle );
var _pz_cos = dcos( look_pz_angle );
var _pz_sin = dsin( look_pz_angle );

look_x = x + _xy_cos*_pz_cos;
look_y = y - _xy_sin*_pz_cos;
look_z = z + _pz_sin;



test_light_x = 120 + lengthdir_x( 100, current_time/10 );
test_light_y = 100 + lengthdir_y( 120, current_time/10 );
test_light_z = 50;

if ( ( current_time mod 1500 ) &lt; 100 ) {
    wa_play_sound( global.snd_sine_440 );
    test_sound_playing = true;
} else if ( test_sound_playing ) {
    wa_stop_sound( global.snd_sine_440 );
    test_sound_playing = false;
}

test_sound_distance = point_distance_3d( x, y, z, test_light_x, test_light_y, test_light_z );
test_sound_mix = lerp( 0.9, 0.3, sound_falloff_curve( test_sound_distance, 100, 1000, 0.4 ) );
test_sound_volume = lerp( 0, 1, sound_falloff_curve( test_sound_distance, 100, 2000, 0.7 ) );
wa_set_effect_property( global.snd_sine_440_effect, "mix", test_sound_mix );
wa_set_volume( global.snd_sine_440, test_sound_volume );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_clear( background_colour );
draw_enable_alphablend( false );
shader_set( shd_dither );
texture_set_stage( shader_get_sampler_index( shd_dither, "u_sDither" ), global.dither_texture );
shader_set_uniform_f( shader_get_uniform( shd_dither, "u_vTextureSize" ), 320, 240 );
draw_surface_ext( application_surface, 0, 0, 3, 3, 0, c_white, 1 );
shader_reset();
draw_enable_alphablend( true );

test_smoothed_timer = lerp( test_smoothed_timer, get_timer() - test_frame_start_time, 0.008 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

var _str = "";
_str += "CLICK TO LOCK MOUSE!#PRESS SPACE TO UNLOCK MOUSE!#WASDQE TO MOVE!";
if ( os_browser != browser_not_a_browser ) _str += "#LOCKED: " + get_mouse_lock_status();
_str += "##FPS=" + string_format( fps, 4, 0 ) + "  ";
_str += "#SMOOTHED DRAW TIME=" + string_format( test_smoothed_timer, 4, 0 ) + "us";
_str += "#SOUND DISTANCE=" + string_format( test_sound_distance, 4, 0 );
_str += "#SOUND MIX=" + string_format( test_sound_mix, 4, 2 );
_str += "#SOUND VOLUME=" + string_format( test_sound_volume, 4, 2 );

draw_set_font( fnt_default );
draw_set_color( c_white );
draw_set_halign( fa_right );
draw_text( view_wport[0]-10, 10, _str );
draw_set_halign( fa_left );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

test_frame_start_time = get_timer();
var _colour = make_colour_hsv( ( current_time/20 ) mod 255, 255, 255 );

draw_set_colour( c_white );
d3d_start();
d3d_set_culling( false );
d3d_set_hidden( false );
d3d_set_lighting( true );
d3d_set_projection_ext( x, y, z,   look_x, look_y, look_z,   0, 0, 1,   60, view_wview[0]/view_hview[0], 1, 16000 );

d3d_light_define_ambient( c_black );
d3d_light_define_point( 0,  test_light_x, test_light_y, test_light_z,   200,   c_white );
d3d_light_define_point( 1,    0,   0, 50,   100,  _colour  );
d3d_light_define_point( 2,  320,   0, 50,   100,  _colour  );
d3d_light_define_point( 3,  320, 320, 50,   100,  _colour  );
d3d_light_define_point( 4,    0, 320, 50,   100,  _colour  );
d3d_light_enable( 0, true );
d3d_light_enable( 1, true );
d3d_light_enable( 2, true );
d3d_light_enable( 3, true );
d3d_light_enable( 4, true );

shader_set( shd_psx );
shader_set_uniform_f( shader_get_uniform( shd_psx, "u_vAmbientColour" ), 0.1, 0.1, 0.13, 0.0 );
vertex_submit( vbf_test, pr_trianglelist, sprite_get_texture( spr_floor, 0 ) );
shader_reset();
d3d_end();
d3d_set_lighting( false );
d3d_set_projection_ortho( 0, 0, view_wview[0], view_hview[0], 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
