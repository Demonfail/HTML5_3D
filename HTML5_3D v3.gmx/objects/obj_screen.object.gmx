<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

persistent = true;

smoothed_timer = 5000;
frame_start_time = get_timer();
do_lighting = true;
do_dither = true;

global.dither_sprite = dither_make_sprite();
global.dither_texture = sprite_get_texture( global.dither_sprite, 0 );

enum e_render { zwrite, diffuse }
global.render_queue[0] = undefined;
global.render_queue_size = 0;
global.render_pass = e_render.zwrite;
global.render_zsurf = surface_create( 320, 240 );
global.render_zsurf_texture = surface_get_texture( global.render_zsurf );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI Begin

if ( do_dither ) {
    
    draw_enable_alphablend( false );
    shader_set( shd_dither );
    texture_set_stage( shader_get_sampler_index( shd_dither, "u_sDither" ), global.dither_texture );
    shader_set_uniform_f( shader_get_uniform( shd_dither, "u_vTextureSize" ), 320, 240 );
    draw_surface_ext( application_surface, 0, 0, 3, 3, 0, c_white, 1 );
    shader_reset();
    draw_enable_alphablend( true );
    
} else {
    
    draw_enable_alphablend( false );
    draw_surface_ext( application_surface, 0, 0, 3, 3, 0, c_white, 1 );
    draw_enable_alphablend( true );

}

smoothed_timer = lerp( smoothed_timer, get_timer() - frame_start_time, 0.008 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw End

shader_reset();

if ( in_browser() ) {
    
    draw_clear( background_colour );
    
    shader_set( shd_z_lighting );
    shader_set_uniform_f( shader_get_uniform( shd_z_lighting, "u_vAmbientColour" ), 0.1, 0.1, 0.13, 0.0 );
    texture_set_stage( shader_get_sampler_index( shd_z_lighting, "u_sDepth" ), global.render_zsurf_texture );
    
    global.render_pass = e_render.diffuse;
    for( var _i = 0; _i &lt; global.render_queue_size; _i++ ) {
        var _inst = global.render_queue[_i];
        with( _inst ) event_perform( ev_draw, 0 );
    }
    
    shader_reset();

} else {
    
    d3d_end();

}


d3d_set_projection_ortho( 0, 0, view_wview[0], view_hview[0], 0 );
d3d_set_culling( false );
if ( keyboard_check( vk_shift ) ) draw_surface_ext( global.render_zsurf, 0, 0, 1, 1, 0, c_blue, 1  );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Begin

frame_start_time = get_timer();

var _light = 0;
with( obj_camera ) {
    d3d_light_define_point( _light, x, y, z, 100, c_dkgray );
    d3d_light_enable( _light, true );
    _light++;
}
with( obj_light ) {
    if ( !visible ) continue;
    d3d_light_define_point( _light, x, y, z, range, colour );
    d3d_light_enable( _light, true );
    _light++;
}

if ( in_browser() ) {
    global.render_queue_size = 0;
    global.render_pass = e_render.zwrite;
    if ( !surface_exists( global.render_zsurf ) ) global.render_zsurf = surface_create( 320, 240 );
    global.render_zsurf_texture = surface_get_texture( global.render_zsurf );
    surface_set_target( global.render_zsurf );
    draw_clear( c_white );
    surface_reset_target();
    draw_clear( c_white );
} else {
    d3d_start();
    d3d_set_hidden( true );
    global.render_pass = e_render.diffuse;
    shader_set( shd_psx );
    shader_set_uniform_f( shader_get_uniform( shd_psx, "u_vAmbientColour" ), 0.1, 0.1, 0.13, 0.0 );
}

d3d_set_culling( true );
draw_set_colour( c_white );
camera_set_projection();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

render_queue_add_self();

var _list = ds_list_create();
with( obj_block ) {
    var _dist = point_distance( x, y, obj_camera.x, obj_camera.y );
    ds_list_add( _list, ( floor( _dist ) &lt;&lt; 17 ) + id );
}
ds_list_sort( _list, false );

render_queue_set_shader();
var _size = ds_list_size( _list );
for( var _i = 0; _i &lt; _size; _i++ ) {
    var _value = _list[| _i ];
    var _inst = _value - ( ( _value &gt;&gt; 17 ) &lt;&lt; 17 );
    with( _inst ) {
        d3d_transform_set_scaling( sprite_width, sprite_height, 100 );
        d3d_transform_add_translation( x, y, z );
        vertex_submit( global.vbf_cube, pr_trianglelist, render_queue_get_texture( spr_floor, 0 ) );
    }
}
d3d_transform_set_identity();
render_queue_copy_z();

ds_list_destroy( _list );

/*
render_queue_add_self();
render_queue_set_shader();
d3d_transform_set_scaling( 32, 32, 100 );
d3d_transform_add_translation( x, y, z );
vertex_submit( global.vbf_cube, pr_trianglelist, render_queue_get_texture( spr_floor, 0 ) );
d3d_transform_set_identity();
render_queue_copy_z();
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
